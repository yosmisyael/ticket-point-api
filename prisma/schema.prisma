// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_DEV")
}

enum VerificationType {
  REGISTRATION
  PASSWORD_RESET
  EMAIL_CHANGE
}

enum Format {
  ONSITE
  ONLINE
  HYBRID
}

model Organization {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  logoUrl     String?  @map("logo_url")
  websiteUrl  String?  @map("website_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  users       User[]

  @@map("organizations")
}

model User {
  id             Int            @id @default(autoincrement())
  email          String         @unique
  name           String
  phone          String?
  password       String
  profileUrl     String?
  verifiedAt     DateTime?      @map("verified_at")
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @default(now()) @map("updated_at")
  organizationId Int?           @map("organization_id")
  organization   Organization?  @relation(fields: [organizationId], references: [id])
  verifications  Verification[]
  events         Event[]
  auths          Authentication[]

  @@map("users")
}

model Verification {
  id        Int              @id @default(autoincrement())
  type      VerificationType @default(REGISTRATION)
  expiresAt DateTime         @map("expires_at")
  token     String
  createdAt DateTime         @default(now()) @map("created_at")
  updatedAt DateTime         @default(now()) @map("updated_at")
  userId    Int
  users     User             @relation(fields: [userId], references: [id])

  @@map("verifications")
}

model Authentication {
  id      Int     @id @default(autoincrement())
  token   String
  userId  Int     @map("user_id")
  user    User    @relation(fields: [userId], references: [id])

  @@map("authentications")
}

model Event {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  format      Format
  isPublished Boolean    @default(false) @map("is_published")
  coverImage  String?    @map("cover_image")
  startDate   DateTime   @map("start_date")
  endDate     DateTime   @map("end_date")
  startTime   Int        @map("start_time")
  endTime     Int        @map("end_time")
  timezone    String     @default("Asia/Jakarta")
  ownerId     Int        @map("owner_id")
  categories  Category[]
  owner       User       @relation(fields: [ownerId], references: [id])
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @default(now()) @map("updated_at")
  agendas     Agenda[]
  faqs        Faq[]
  tiers       Tier[]
  location    EventLocation?

  @@map("events")
}

model EventLocation {
  id          Int       @id @default(autoincrement())
  platformUrl String?   @map("platform_url")
  platform    String?
  venue       String?
  address     String?
  latitude    Float?
  longitude   Float?
  mapUrl      String?   @map("map_url")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")

  eventId   Int      @unique @map("event_id")
  event     Event    @relation(fields: [eventId], references: [id])
  @@map("event_locations")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique()
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  events    Event[]

  @@map("categories")
}

model Faq {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  eventId   Int      @map("event_id")
  event     Event    @relation(fields: [eventId], references: [id])

  @@map("faqs")
}

model Agenda {
  id        Int      @id @default(autoincrement())
  title     String
  startTime Int      @map("start_time")
  endTime   Int      @map("end_time")
  timezone  String   @default("Asia/Jakarta")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  eventId   Int      @map("event_id")
  event     Event    @relation(fields: [eventId], references: [id])

  @@map("agendas")
}

model Tier {
  id           Int      @id @default(autoincrement())
  name         String
  price        Int
  capacity     Int
  remains      Int
  format       Format
  currency     String
  icon         String?
  iconColor    String   @map("icon_color")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  eventId      Int      @map("event_id")
  event        Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  tickets      Ticket[]
  tierBenefits TierBenefit[]

  @@unique([name, format])
  @@map("tiers")
}

model TierBenefit {
  id            Int      @id @default(autoincrement())
  tierId        Int      @map("tier_id")
  description   String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")
  tier          Tier     @relation(fields: [tierId], references: [id], onDelete: Cascade)

  @@map("tier_benefit")
}

model Ticket {
  id                  Int       @id @default(autoincrement())
  credential          String?   @unique()
  firstName           String    @map("first_name")
  lastName            String    @map("last_name")
  email               String
  phone               String
  position            String
  orderId             String?   @unique() @map("order_id")
  organization        String    @map("organization_name")
  transactionStatus   Boolean   @default(false) @map("transaction_status")
  transactionType     String?   @map("transaction_type")
  transactionTime     DateTime? @map("transaction_time")
  fraudStatus         String?   @map("fraud_status")
  isCheckin           Boolean   @default(false) @map("is_check_in")
  checkinDate         DateTime? @map("check_in_date")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @default(now()) @map("updated_at")
  tierId              Int?      @map("tier_id")
  tier                Tier?     @relation(fields: [tierId], references: [id], onDelete: Cascade)

  @@map("tickets")
}
